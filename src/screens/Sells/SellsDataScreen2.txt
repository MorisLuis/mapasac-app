import React, { useCallback, useContext, useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { View } from 'react-native';
import { useTheme } from '../../context/ThemeContext';
import { RouteProp, useNavigation } from '@react-navigation/native';
import { globalFont } from '../../theme/appTheme';
import { SellsDataScreenTheme } from '../../theme/SellsDataScreenTheme';
import { getIdinveartsProduct, getProductByEnlacemob, getProductsSellsFromFamily, getTotalClassesSells } from '../../services/productsSells';
import ClassInterface from '../../interface/class';
import EnlacemobInterface from '../../interface/enlacemob';
import { AuthContext } from '../../context/auth/AuthContext';
import { SellsBagContext } from '../../context/Sells/SellsBagContext';
import { SellsNavigationStackParamList, UnitType } from '../../navigator/SellsNavigation';
import useErrorHandler from '../../hooks/useErrorHandler';
import CustomText from '../../components/Ui/CustumText';
import ImageContainerCustum from '../../components/Ui/ImageContainerCustum';
import FooterScreen from '../../components/Navigation/FooterScreen';
import Tag from '../../components/Ui/Tag';
import CardButton from '../../components/Cards/CardButton';

type SellsDataScreenRouteProp = RouteProp<SellsNavigationStackParamList, 'SellsDataScreen'>;

export type FormType = {
    pieces: string;
    price: string;
    typeClass: UnitType;
    units: UnitType;
    capa: string;
    idinveclas?: number;
};

interface SellsDataScreenInterface {
    route: SellsDataScreenRouteProp
};

export const SellsDataScreen = ({ route }: SellsDataScreenInterface) => {
    const { pieces, price, typeClass, units, cvefamilia, productSellData, descripcio, image, totalClasses: totalClassesProp } = route?.params ?? {};
    const { typeTheme, theme } = useTheme();
    const { user } = useContext(AuthContext);
    const { addProductSell } = useContext(SellsBagContext);
    const { goBack, navigate } = useNavigation<any>();
    const { handleError } = useErrorHandler()

    const [title, setTitle] = useState<string>();
    const [imageValue, setImageValue] = useState<string>();

    const [idinveartsValue, setIdinveartsValue] = useState<number>();
    const [cvefamiliaValue, setCvefamiliaValue] = useState<number>();
    const [totalClasses] = useState<number>(totalClassesProp ? totalClassesProp : 0);

    const { control, handleSubmit, setValue, getValues, watch } = useForm<FormType>({
        defaultValues: {
            pieces: pieces,
            price: price,
            typeClass: typeClass,
            units: units,
            capa: typeClass?.value,
            idinveclas: undefined
        },
    });

    const haveClasses = totalClasses > 0;
    const completeTheForm = watch("typeClass") && watch('units') && watch('price') && watch('pieces');
    const buttondisabled = !haveClasses ? !(watch('units') && watch('price') && watch('pieces')) : !completeTheForm;

    const onSubmit = useCallback(() => {
        if (!getValues('idinveclas') && haveClasses) return;

        const bagProduct: EnlacemobInterface = {
            cantidad: parseFloat(getValues('pieces')),
            precio: parseFloat(getValues('price')),
            idinvearts: Number(getValues('typeClass')) || idinveartsValue as number,
            unidad: Number(getValues('units')),
            capa: getValues('capa'),
            idusrmob: user?.idusrmob as number,
            idinveclas: getValues('idinveclas')
        };

        goBack();
        addProductSell(bagProduct);
    }, [getValues, haveClasses, idinveartsValue, goBack, addProductSell, user?.idusrmob]);

    const handleGetTotal = useCallback(async () => {
        if (!cvefamilia) return;

        try {
            const total = await getTotalClassesSells(cvefamilia);
            if (total.error) return handleError(total.error);


            if (total === "1") {
                const classesData = await getProductsSellsFromFamily(cvefamilia);
                if (classesData.error) return handleError(classesData.error);

                const clases = classesData[0];
                const { ridinvearts: idinvearts, rcapa: capa, ridinveclas: idinveclas } = clases ?? {};

                setValue('typeClass', {
                    id: clases.ridinvearts,
                    value: clases.rproducto
                });

                handleGetProduct({ idinvearts, capa, idinveclas });
            } else if (total === "0") {
                const product = await getIdinveartsProduct(cvefamilia);
                if (product.error) return handleError(product.error);

                setIdinveartsValue(product.idinvearts);
            }
        } catch (error) {
            handleError(error);
        }

    }, [cvefamilia, setValue]);

    const handleGetProduct = useCallback(async ({ idinvearts, capa, idinveclas }: any) => {

        try {
            const product = await getProductByEnlacemob({ idinvearts, capa, idinveclas });
            console.log({product: JSON.stringify(product, null, 2)})
            if (product.error) return handleError(product.error);
            setValue('price', product?.precio.toString());
            setValue('units', {
                value: product?.unidad_nombre?.trim(),
                id: product?.unidad
            });

            if (typeClass) {
                setValue('typeClass', {
                    id: typeClass.id,
                    value: typeClass.value
                });
            }

            setValue('capa', capa);
            setValue("idinveclas", idinveclas);
        } catch (error) {
            handleError(error);
        }
    }, [setValue, typeClass]);

    const handleGoToClassScreen = useCallback(() => {
        if (totalClasses && totalClasses > 1) {
            navigate('[Modal] - ClassScreen', { from: "typeClass", valueDefault: getValues('typeClass'), cvefamilia: cvefamiliaValue });
        }
    }, [totalClasses, cvefamiliaValue, getValues, navigate]);

    useEffect(() => {
        console.log({typeClass})
        // Actualiza los valores usando setValue solo para los casos en que el setter se necesita
        if (pieces) setValue('pieces', pieces);
        if (price) setValue('price', price);
        if (typeClass) setValue('typeClass', typeClass);
        if (units) setValue('units', units);

        // Actualiza valores usando setters especÃ­ficos
        if (cvefamilia) setCvefamiliaValue(cvefamilia);
        if (descripcio) setTitle(descripcio);
        if (image) setImageValue(image);
        handleGetTotal();
    }, [pieces, price, typeClass, units, cvefamilia, descripcio, image]);

    useEffect(() => {
        if (!productSellData) return;
        const { idinvearts, capa, idinveclas } = productSellData ?? {};
        handleGetProduct({ idinvearts, capa, idinveclas });
    }, [productSellData]);

    return (
        <View style={SellsDataScreenTheme(theme, typeTheme).SellsDataScreen}>
            <View style={SellsDataScreenTheme(theme, typeTheme).header}>
                <CustomText style={SellsDataScreenTheme(theme, typeTheme).title}>
                    {title?.trim()}
                </CustomText>
                <Tag
                    message={`${totalClasses} ${totalClasses == 1 ? 'Clase' : 'Clases'}`}
                    color='purple'
                    extraStyles={{ marginBottom: globalFont.font_sm / 2 }}
                />
            </View>

            <ImageContainerCustum
                imageValue=';'
                size="small"
            />

            <CardButton
                onPress={handleGoToClassScreen}
                label='Clase:'
                valueDefault='Seleccionar la clase'
                color='green'
                control={control}
                controlValue='typeClass'
                icon='resize-outline'
                isCapa={true}
            /*  disabled={!haveClasses} */
            />

            {
                (watch('typeClass') || (totalClasses !== undefined && totalClasses !== null && !haveClasses)) ?
                    <>
                        <CardButton
                            onPress={() => navigate('[Modal] - PiecesScreen', { from: "pieces", valueDefault: getValues('pieces'), unit: 'PZA' })}
                            label='Cantidad:'
                            valueDefault='Seleccionar cantidad'
                            color='green'
                            control={control}
                            controlValue='pieces'
                            icon="bag-handle"
                            isUnit={true}
                        />

                        <CardButton
                            onPress={() => navigate('[Modal] - UnitScreen', { from: "units", valueDefault: getValues('units') })}
                            label='Unidad:'
                            valueDefault='Seleccionar Unidad'
                            color='red'
                            control={control}
                            controlValue='units'
                            icon="shapes"
                            isUnit={true}
                        />

                        <CardButton
                            onPress={() => navigate('[Modal] - PriceScreen', { from: "price", valueDefault: getValues('price'), unit: 'MXN' })}
                            label='Precio:'
                            valueDefault='Seleccionar precio'
                            color='purple'
                            control={control}
                            controlValue='price'
                            icon="pricetags"
                            isPrice={true}
                        />

                        <FooterScreen
                            buttonTitle="Publicar"
                            buttonOnPress={handleSubmit(onSubmit)}
                            buttonDisabled={buttondisabled}
                        />
                    </>
                    :
                    <View>
                        <CustomText>Cargando...</CustomText>
                    </View>
            }
        </View>
    );
};